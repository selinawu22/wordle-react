{"ast":null,"code":"var _jsxFileName = \"/Users/selinawu/Desktop/wordle-react/src/components/pages/GamePage.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport Keypad from '../Keypad';\nimport WordGrid from '../WordGrid';\nimport FinishPage from './FinishPage';\nimport Logo from '../Logo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PORT = 4300;\nconst WORD_LENGTH = 5;\nconst EMPTY_WORD = '     ';\nconst TOTAL_ATTEMPTS = 6;\nconst WORD_GEN_API_URL = `https://random-word-api.herokuapp.com/word?length=${WORD_LENGTH}`;\nconst WORD_CHECK_API_URL = 'https://api.dictionaryapi.dev/api/v2/entries/en';\nlet wordOfTheDay;\nfunction GamePage({\n  setPageState\n}) {\n  _s();\n  const [attempts, setAttempts] = useState(0);\n  const [wordGrid, setWordGrid] = useState(Array(TOTAL_ATTEMPTS).fill(EMPTY_WORD));\n  const [word, setWord] = useState([]);\n  const [keyColor, setKeyColor] = useState({});\n  const gameOver = () => attempts === TOTAL_ATTEMPTS - 1;\n  const gameWon = () => word === wordOfTheDay;\n  const loadFinishPage = text => setPageState(/*#__PURE__*/_jsxDEV(FinishPage, {\n    setPageState: setPageState,\n    text: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 51\n  }, this));\n  const greenKeyCheck = i => word[i] === wordOfTheDay[i];\n  const modifyCurrentWord = newWord => setWordGrid(wordGrid.map((e, ind) => ind !== attempts ? e : newWord.padEnd(WORD_LENGTH, ' ')));\n\n  // get 5 letter word via API\n  useEffect(() => {\n    getWord();\n  }, []);\n  const getWord = () => {\n    fetch(`http://localhost:4300/getword`).then(data => {\n      if (!data.ok) {\n        console.error('Error getting data:', error);\n      }\n      return data.json();\n    }).then(word => {\n      console.log(word);\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n      wordOfTheDay = \"SMILE\";\n    });\n  };\n\n  // checks valid 5 letter word via API\n  const checkValidWord = () => {\n    return fetch(`${WORD_CHECK_API_URL}/${word}`).then(res => {\n      if (!res.ok) {\n        throw new Error('invalid word');\n      }\n    });\n  };\n  const processAttempt = () => {\n    updateKeyColor();\n    setAttempts(attempts + 1);\n    setWordGrid(wordGrid.map((e, ind) => ind !== attempts ? e : word));\n    setWord('');\n  };\n  const handleDeleteKey = () => {\n    if (word.length > 0) {\n      setWord(word.slice(0, -1));\n      modifyCurrentWord(word.slice(0, -1));\n    } else {\n      applyRowShakeAnimation();\n    }\n  };\n  const handleLetterKey = w => {\n    if (word.length < WORD_LENGTH) {\n      let newWord = word + w;\n      setWord(newWord);\n      modifyCurrentWord(newWord);\n    }\n  };\n  const handleEnterKey = () => {\n    if (word.length === WORD_LENGTH) {\n      if (gameWon()) {\n        loadFinishPage('Congratulations, you won!');\n      } else if (gameOver()) {\n        loadFinishPage(`Game over. The word was ${wordOfTheDay}`);\n      } else {\n        checkValidWord().then(processAttempt).catch(applyRowShakeAnimation);\n      }\n    } else {\n      applyRowShakeAnimation();\n    }\n  };\n  const updateKeyColor = () => {\n    let newColor = {};\n    for (let i = 0; i < word.length; i++) {\n      if (greenKeyCheck(i)) {\n        newColor[word[i]] = 'green';\n      } else if (!keyColor[word[i]] && wordOfTheDay.includes(word[i])) {\n        newColor[word[i]] = 'yellow';\n      } else if (!keyColor[word[i]]) {\n        newColor[word[i]] = 'grey';\n      }\n    }\n    setKeyColor({\n      ...keyColor,\n      ...newColor\n    });\n  };\n  const handleKeyDown = keyVal => {\n    switch (keyVal) {\n      case 'Backspace':\n        handleDeleteKey();\n        break;\n      case 'Delete':\n        handleDeleteKey();\n        break;\n      case 'Enter':\n        handleEnterKey();\n        break;\n      default:\n        if (keyVal.match(/^[a-zA-Z]$/)) {\n          handleLetterKey(keyVal.toLocaleUpperCase());\n        }\n    }\n    ;\n  };\n  const applyRowShakeAnimation = () => {\n    document.getElementById('currWordRow').classList.add('apply-shake');\n  };\n\n  // resets shake animation event listener + changes row based on attempt no\n  useEffect(() => {\n    const currWordRow = document.getElementById('currWordRow');\n    const stopShakeAnimation = () => currWordRow.classList.remove('apply-shake');\n    currWordRow.addEventListener('animationend', stopShakeAnimation);\n    return () => currWordRow.removeEventListener('animationend', stopShakeAnimation);\n  }, [attempts]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page flex\",\n    onKeyDown: e => handleKeyDown(e.key),\n    tabIndex: \"0\",\n    children: [/*#__PURE__*/_jsxDEV(Logo, {\n      height: \"15vh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(WordGrid, {\n      word: word,\n      wordGrid: wordGrid,\n      wordOfTheDay: wordOfTheDay,\n      attempt: attempts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Keypad, {\n      keyColor: keyColor,\n      setWord: handleKeyDown\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 7\n  }, this);\n}\n_s(GamePage, \"MEvh1qzZ4sWy2te/nIF9Bp7hggo=\");\n_c = GamePage;\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["useState","useEffect","Keypad","WordGrid","FinishPage","Logo","jsxDEV","_jsxDEV","PORT","WORD_LENGTH","EMPTY_WORD","TOTAL_ATTEMPTS","WORD_GEN_API_URL","WORD_CHECK_API_URL","wordOfTheDay","GamePage","setPageState","_s","attempts","setAttempts","wordGrid","setWordGrid","Array","fill","word","setWord","keyColor","setKeyColor","gameOver","gameWon","loadFinishPage","text","fileName","_jsxFileName","lineNumber","columnNumber","greenKeyCheck","i","modifyCurrentWord","newWord","map","e","ind","padEnd","getWord","fetch","then","data","ok","console","error","json","log","catch","checkValidWord","res","Error","processAttempt","updateKeyColor","handleDeleteKey","length","slice","applyRowShakeAnimation","handleLetterKey","w","handleEnterKey","newColor","includes","handleKeyDown","keyVal","match","toLocaleUpperCase","document","getElementById","classList","add","currWordRow","stopShakeAnimation","remove","addEventListener","removeEventListener","className","onKeyDown","key","tabIndex","children","height","attempt","_c","$RefreshReg$"],"sources":["/Users/selinawu/Desktop/wordle-react/src/components/pages/GamePage.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport Keypad from '../Keypad';\nimport WordGrid from '../WordGrid';\nimport FinishPage from './FinishPage';\nimport Logo from '../Logo';\n\nconst PORT = 4300;\nconst WORD_LENGTH = 5;\nconst EMPTY_WORD = '     '\nconst TOTAL_ATTEMPTS = 6;\n\nconst WORD_GEN_API_URL = `https://random-word-api.herokuapp.com/word?length=${WORD_LENGTH}`;\nconst WORD_CHECK_API_URL = 'https://api.dictionaryapi.dev/api/v2/entries/en';\n\nlet wordOfTheDay;\n\n\nfunction GamePage({setPageState}) {\n    const [attempts, setAttempts] = useState(0);\n    const [wordGrid, setWordGrid] = useState(Array(TOTAL_ATTEMPTS).fill(EMPTY_WORD));\n    const [word, setWord] = useState([]);\n    const [keyColor, setKeyColor] = useState({});\n\n\n    const gameOver = () => attempts === TOTAL_ATTEMPTS - 1;\n    const gameWon = () => word === wordOfTheDay;\n    const loadFinishPage = (text) => setPageState(<FinishPage setPageState={setPageState} text={text}/>);\n    const greenKeyCheck = (i) => word[i] === wordOfTheDay[i];\n    const modifyCurrentWord = (newWord) => setWordGrid(wordGrid.map((e, ind) => (ind !== attempts) ? e : newWord.padEnd(WORD_LENGTH, ' ')));\n    \n\n    // get 5 letter word via API\n    useEffect(() => {getWord()}, []);\n    const getWord = () => { \n      fetch(`http://localhost:4300/getword`)\n      .then((data) => {\n        if (!data.ok) {\n          console.error('Error getting data:', error)\n        }\n        return data.json()\n      }).then((word) => {\n        console.log(word)\n      })\n      .catch((error) => {\n          console.error('Error fetching data:', error)\n          wordOfTheDay = \"SMILE\"\n      });\n    }\n\n    // checks valid 5 letter word via API\n    const checkValidWord = () => {\n      return fetch(`${WORD_CHECK_API_URL}/${word}`).then((res) => {\n        if (!res.ok) {\n          throw new Error('invalid word')\n        }\n      })\n    }\n    \n    const processAttempt = () => {\n      updateKeyColor();\n      setAttempts(attempts + 1);\n      setWordGrid(wordGrid.map((e, ind) => (ind !== attempts) ? e : word));\n      setWord('');\n    }\n\n    const handleDeleteKey = () => {\n      if (word.length > 0) {\n        setWord(word.slice(0, -1));\n        modifyCurrentWord(word.slice(0, -1));\n      } else {\n        applyRowShakeAnimation();\n      }\n    };\n\n\n    const handleLetterKey = (w) => {\n      if (word.length < WORD_LENGTH) {\n        let newWord = word + w;\n        setWord(newWord);\n        modifyCurrentWord(newWord);\n      }\n    };\n\n    const handleEnterKey = () => {\n      if (word.length === WORD_LENGTH) {\n        if (gameWon()) {\n          loadFinishPage('Congratulations, you won!');\n        } else if (gameOver()) {\n          loadFinishPage(`Game over. The word was ${wordOfTheDay}`);\n        } else {\n          checkValidWord().then(processAttempt).catch(applyRowShakeAnimation);\n        }\n      } else {\n        applyRowShakeAnimation();\n      }\n    };\n\n    const updateKeyColor = () => {\n      let newColor = {};\n      for (let i = 0; i < word.length; i++) {\n        if (greenKeyCheck(i)) {\n          newColor[word[i]] = 'green';\n        } else if (!keyColor[word[i]] && wordOfTheDay.includes(word[i])) {\n          newColor[word[i]] = 'yellow';\n        } else if (!keyColor[word[i]]) {\n          newColor[word[i]] = 'grey';\n        }\n      }\n      setKeyColor({ ...keyColor, ...newColor});\n    }\n\n    const handleKeyDown = (keyVal) => {\n      switch (keyVal) {\n        case 'Backspace':\n          handleDeleteKey();\n          break;\n        case 'Delete':\n          handleDeleteKey();\n          break;\n        case 'Enter':\n          handleEnterKey();\n          break;\n        default:\n          if (keyVal.match(/^[a-zA-Z]$/)) {\n            handleLetterKey(keyVal.toLocaleUpperCase());\n          }\n      };\n\n    }\n\n    const applyRowShakeAnimation = () => {\n      document.getElementById('currWordRow').classList.add('apply-shake');\n    }\n    \n    // resets shake animation event listener + changes row based on attempt no\n    useEffect(() => {\n      const currWordRow = document.getElementById('currWordRow');\n      const stopShakeAnimation = () => currWordRow.classList.remove('apply-shake');\n\n      currWordRow.addEventListener('animationend', stopShakeAnimation);\n\n      return () => currWordRow.removeEventListener('animationend', stopShakeAnimation);\n    }, [attempts]);\n\n    return (\n      <div className=\"page flex\" onKeyDown={(e) => handleKeyDown(e.key)} tabIndex=\"0\">\n        <Logo height='15vh'/>\n        <WordGrid word={word} wordGrid={wordGrid} wordOfTheDay={wordOfTheDay} attempt={attempts}/>\n        <Keypad keyColor={keyColor} setWord={handleKeyDown}/>\n      </div>\n    );\n}\n\nexport default GamePage"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}