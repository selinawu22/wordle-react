{"ast":null,"code":"var _jsxFileName = \"/Users/selinawu/Desktop/wordle-react/src/components/WordRow.jsx\";\nimport React, { useState } from 'react';\nimport LetterBox from './LetterBox';\nimport WordRowEmpty from './WordRowEmpty';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WordRow({\n  wordRow,\n  wordOfTheDay,\n  id\n}) {\n  const colorMap = new Map([['blue', '#a9b5df'], ['yellow', '#f8fbab'], ['green', '#d4edd5']]);\n  let correctLetters = wordOfTheDay === null || wordOfTheDay === void 0 ? void 0 : wordOfTheDay.slice(0);\n  let letterColor = ind => {\n    if (!wordOfTheDay) {\n      return 'blue';\n    }\n    if (correctLetters.includes(wordRow[ind])) {\n      correctLetters = correctLetters.replace(wordRow[ind], '');\n      if (wordOfTheDay[ind] === wordRow[ind]) {\n        return 'green';\n      } else {\n        return 'yellow';\n      }\n    } else {\n      return 'blue';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wordRow\",\n    id: id,\n    children: wordRow.split('').map((char, ind) => /*#__PURE__*/_jsxDEV(LetterBox, {\n      letter: char,\n      color: colorMap.get(letterColor(ind))\n    }, ind, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 47\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_c = WordRow;\nexport default WordRow;\nvar _c;\n$RefreshReg$(_c, \"WordRow\");","map":{"version":3,"names":["React","useState","LetterBox","WordRowEmpty","jsxDEV","_jsxDEV","WordRow","wordRow","wordOfTheDay","id","colorMap","Map","correctLetters","slice","letterColor","ind","includes","replace","className","children","split","map","char","letter","color","get","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/selinawu/Desktop/wordle-react/src/components/WordRow.jsx"],"sourcesContent":["import React, { useState } from 'react'\nimport LetterBox from './LetterBox'\nimport WordRowEmpty from './WordRowEmpty';\n\nfunction WordRow({wordRow, wordOfTheDay, id}) {\n  const colorMap = new Map([\n    ['blue', '#a9b5df'],\n    ['yellow', '#f8fbab'],\n    ['green', '#d4edd5'],\n  ]);\n\n  let correctLetters = wordOfTheDay?.slice(0);\n\n  let letterColor = (ind) => {\n    if (!wordOfTheDay) {\n      return 'blue';\n    }\n    \n    if (correctLetters.includes(wordRow[ind])) {\n      correctLetters = correctLetters.replace(wordRow[ind], '')\n      if (wordOfTheDay[ind] === wordRow[ind]) {\n        return 'green';\n      } else {\n        return 'yellow';\n      }\n    } else {\n      return 'blue';\n    }\n  }\n\n  return (\n    <div className='wordRow' id={id}>\n        {wordRow.split('').map((char, ind) => <LetterBox key={ind} letter={char} color={colorMap.get(letterColor(ind))}/>) }\n    </div>\n  )\n}\n\nexport default WordRow"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,SAASC,OAAOA,CAAC;EAACC,OAAO;EAAEC,YAAY;EAAEC;AAAE,CAAC,EAAE;EAC5C,MAAMC,QAAQ,GAAG,IAAIC,GAAG,CAAC,CACvB,CAAC,MAAM,EAAE,SAAS,CAAC,EACnB,CAAC,QAAQ,EAAE,SAAS,CAAC,EACrB,CAAC,OAAO,EAAE,SAAS,CAAC,CACrB,CAAC;EAEF,IAAIC,cAAc,GAAGJ,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEK,KAAK,CAAC,CAAC,CAAC;EAE3C,IAAIC,WAAW,GAAIC,GAAG,IAAK;IACzB,IAAI,CAACP,YAAY,EAAE;MACjB,OAAO,MAAM;IACf;IAEA,IAAII,cAAc,CAACI,QAAQ,CAACT,OAAO,CAACQ,GAAG,CAAC,CAAC,EAAE;MACzCH,cAAc,GAAGA,cAAc,CAACK,OAAO,CAACV,OAAO,CAACQ,GAAG,CAAC,EAAE,EAAE,CAAC;MACzD,IAAIP,YAAY,CAACO,GAAG,CAAC,KAAKR,OAAO,CAACQ,GAAG,CAAC,EAAE;QACtC,OAAO,OAAO;MAChB,CAAC,MAAM;QACL,OAAO,QAAQ;MACjB;IACF,CAAC,MAAM;MACL,OAAO,MAAM;IACf;EACF,CAAC;EAED,oBACEV,OAAA;IAAKa,SAAS,EAAC,SAAS;IAACT,EAAE,EAAEA,EAAG;IAAAU,QAAA,EAC3BZ,OAAO,CAACa,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEP,GAAG,kBAAKV,OAAA,CAACH,SAAS;MAAWqB,MAAM,EAAED,IAAK;MAACE,KAAK,EAAEd,QAAQ,CAACe,GAAG,CAACX,WAAW,CAACC,GAAG,CAAC;IAAE,GAAzDA,GAAG;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAuD,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjH,CAAC;AAEV;AAACC,EAAA,GA/BQxB,OAAO;AAiChB,eAAeA,OAAO;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}